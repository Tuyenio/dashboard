import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { motion, AnimatePresence } from "framer-motion";
import { 
  MessageCircle, Send, Bot, User, Minimize2, Maximize2, 
  X, Mic, MicOff, Volume2, VolumeX, RotateCcw,
  TrendingUp, BarChart3, PieChart, Activity, Brain
} from "lucide-react";
import { useLanguage } from "@/contexts/LanguageContext";

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  type?: 'text' | 'chart' | 'data';
}

interface AIChatBotProps {
  isOpen: boolean;
  onToggle: () => void;
}

export function AIChatBot({ isOpen, onToggle }: AIChatBotProps) {
  const { t } = useLanguage();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'Xin ch√†o! T√¥i l√† AI Assistant c·ªßa h·ªá th·ªëng Dashboard Kinh t·∫ø Vi·ªát Nam. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ Gi·∫£i th√≠ch d·ªØ li·ªáu kinh t·∫ø\n‚Ä¢ Ph√¢n t√≠ch xu h∆∞·ªõng\n‚Ä¢ T·∫°o b√°o c√°o\n‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi chuy√™n m√¥n\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
      sender: 'ai',
      timestamp: new Date(),
      type: 'text'
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isSoundEnabled, setIsSoundEnabled] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const predefinedQuestions = [
    "GDP Vi·ªát Nam hi·ªán t·∫°i nh∆∞ th·∫ø n√†o?",
    "T·ª∑ l·ªá th·∫•t nghi·ªáp nƒÉm 2024?",
    "So s√°nh xu·∫•t kh·∫©u v·ªõi nƒÉm tr∆∞·ªõc",
    "Ph√¢n t√≠ch ng√†nh c√¥ng nghi·ªáp",
    "D·ª± b√°o kinh t·∫ø 2025"
  ];

  const aiResponses: Record<string, string> = {
    "gdp": "GDP Vi·ªát Nam Q3/2024 ƒë·∫°t 105.2 ngh√¨n t·ª∑ VND, tƒÉng 7.3% so v·ªõi c√πng k·ª≥ nƒÉm tr∆∞·ªõc. ƒê√¢y l√† m·ª©c tƒÉng tr∆∞·ªüng t√≠ch c·ª±c, v∆∞·ª£t m·ª•c ti√™u 6.8% ƒë·ªÅ ra. C√°c ng√†nh ƒë√≥ng g√≥p ch√≠nh:\n\nüìà C√¥ng nghi·ªáp: 38.2% GDP\nüè¢ D·ªãch v·ª•: 49.3% GDP\nüåæ N√¥ng nghi·ªáp: 12.5% GDP",
    
    "th·∫•t nghi·ªáp": "T·ª∑ l·ªá th·∫•t nghi·ªáp Vi·ªát Nam nƒÉm 2024 ƒë∆∞·ª£c duy tr√¨ ·ªü m·ª©c th·∫•p 3.8%, gi·∫£m 0.3% so v·ªõi nƒÉm 2023. ƒêi·ªÉm n·ªïi b·∫≠t:\n\n‚úÖ Lao ƒë·ªông c√≥ vi·ªác l√†m: 96.2%\nüìä Lao ƒë·ªông qua ƒë√†o t·∫°o: 68.5%\nüè≠ Vi·ªác l√†m c√¥ng nghi·ªáp: tƒÉng 8.9%\nüíº Vi·ªác l√†m d·ªãch v·ª•: tƒÉng 7.1%",
    
    "xu·∫•t kh·∫©u": "Kim ng·∫°ch xu·∫•t kh·∫©u 2024 ∆∞·ªõc ƒë·∫°t 350.8 t·ª∑ USD, tƒÉng 9.2% so v·ªõi 2023. Nh√≥m h√†ng xu·∫•t kh·∫©u ch·ªß l·ª±c:\n\nüì± ƒêi·ªán t·ª≠ & vi·ªÖn th√¥ng: 158.7 t·ª∑ USD\nüëî D·ªát may & gi√†y d√©p: 94.1 t·ª∑ USD\n‚öôÔ∏è M√°y m√≥c & thi·∫øt b·ªã: 75.3 t·ª∑ USD\nüåæ N√¥ng s·∫£n & th·ª±c ph·∫©m: 49.8 t·ª∑ USD",
    
    "c√¥ng nghi·ªáp": "Ng√†nh c√¥ng nghi·ªáp Vi·ªát Nam 2024 c√≥ nh·ªØng ƒëi·ªÉm s√°ng:\n\nüöÄ TƒÉng tr∆∞·ªüng: 8.5% (cao h∆°n m·ª•c ti√™u)\nüè≠ S·∫£n xu·∫•t: TƒÉng 12.3%\n‚ö° NƒÉng su·∫•t lao ƒë·ªông: TƒÉng 6.7%\nüîß C√¥ng ngh·ªá cao: Chi·∫øm 15.8% t·ªïng s·∫£n l∆∞·ª£ng\nüí° ƒê·∫ßu t∆∞ FDI: 23.2 t·ª∑ USD",
    
    "d·ª± b√°o": "D·ª± b√°o kinh t·∫ø Vi·ªát Nam 2025:\n\nüìà GDP: TƒÉng 6.5-7.0%\nüíπ CPI: Ki·ªÉm so√°t d∆∞·ªõi 4.5%\nüìä Xu·∫•t kh·∫©u: TƒÉng 8-10%\nüíº Th·∫•t nghi·ªáp: Duy tr√¨ d∆∞·ªõi 4%\nüèóÔ∏è ƒê·∫ßu t∆∞: TƒÉng 12-15%\n\nC√°c y·∫øu t·ªë t√≠ch c·ª±c: Ph·ª•c h·ªìi kinh t·∫ø to√†n c·∫ßu, FTA hi·ªáu l·ª±c, c·∫£i c√°ch th·ªÉ ch·∫ø."
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = async (content: string) => {
    if (!content.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'user',
      timestamp: new Date(),
      type: 'text'
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI processing
    setTimeout(() => {
      const response = generateAIResponse(content);
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: response,
        sender: 'ai',
        timestamp: new Date(),
        type: 'text'
      };

      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const generateAIResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    if (input.includes('gdp') || input.includes('tƒÉng tr∆∞·ªüng')) {
      return aiResponses.gdp;
    } else if (input.includes('th·∫•t nghi·ªáp') || input.includes('vi·ªác l√†m')) {
      return aiResponses["th·∫•t nghi·ªáp"];
    } else if (input.includes('xu·∫•t kh·∫©u') || input.includes('kim ng·∫°ch')) {
      return aiResponses["xu·∫•t kh·∫©u"];
    } else if (input.includes('c√¥ng nghi·ªáp') || input.includes('s·∫£n xu·∫•t')) {
      return aiResponses["c√¥ng nghi·ªáp"];
    } else if (input.includes('d·ª± b√°o') || input.includes('2025')) {
      return aiResponses["d·ª± b√°o"];
    } else {
      return `T√¥i hi·ªÉu b·∫°n quan t√¢m v·ªÅ "${userInput}". D·ª±a tr√™n d·ªØ li·ªáu hi·ªán t·∫°i:\n\n‚Ä¢ H·ªá th·ªëng ƒëang ph√¢n t√≠ch d·ªØ li·ªáu li√™n quan\n‚Ä¢ Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ GDP, vi·ªác l√†m, xu·∫•t kh·∫©u, c√¥ng nghi·ªáp ho·∫∑c d·ª± b√°o\n‚Ä¢ Ho·∫∑c ch·ªçn m·ªôt trong c√°c c√¢u h·ªèi g·ª£i √Ω b√™n d∆∞·ªõi\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch s√¢u h∆°n!`;
    }
  };

  const handleQuestionClick = (question: string) => {
    sendMessage(question);
  };

  const clearChat = () => {
    setMessages([{
      id: '1',
      content: 'Chat ƒë√£ ƒë∆∞·ª£c x√≥a. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
      sender: 'ai',
      timestamp: new Date(),
      type: 'text'
    }]);
  };

  if (!isOpen) return null;

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.8, y: 20 }}
      animate={{ opacity: 1, scale: 1, y: 0 }}
      exit={{ opacity: 0, scale: 0.8, y: 20 }}
      className={`fixed bottom-4 right-4 z-50 ${isMinimized ? 'w-80' : 'w-96'} ${isMinimized ? 'h-16' : 'h-[600px]'} bg-background border border-border rounded-lg shadow-2xl backdrop-blur-lg`}
    >
      <Card className="h-full card-premium">
        {/* Header */}
        <CardHeader className="p-4 bg-gradient-to-r from-primary/10 to-accent/10 rounded-t-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <motion.div
                className="w-8 h-8 bg-gradient-primary rounded-lg flex items-center justify-center"
                animate={{ rotate: isTyping ? 360 : 0 }}
                transition={{ duration: 2, repeat: isTyping ? Infinity : 0 }}
              >
                <Brain className="h-4 w-4 text-primary-foreground" />
              </motion.div>
              <div>
                <CardTitle className="text-sm font-bold">AI Assistant</CardTitle>
                <div className="flex items-center gap-2">
                  <div className="status-dot active"></div>
                  <span className="text-xs text-muted-foreground">
                    {isTyping ? "ƒêang suy nghƒ©..." : "S·∫µn s√†ng h·ªó tr·ª£"}
                  </span>
                </div>
              </div>
            </div>
            
            <div className="flex items-center gap-1">
              <Button
                size="sm"
                variant="ghost"
                onClick={() => setIsSoundEnabled(!isSoundEnabled)}
                className="h-8 w-8 p-0"
              >
                {isSoundEnabled ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
              </Button>
              <Button
                size="sm"
                variant="ghost"
                onClick={() => setIsMinimized(!isMinimized)}
                className="h-8 w-8 p-0"
              >
                {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
              </Button>
              <Button
                size="sm"
                variant="ghost"
                onClick={onToggle}
                className="h-8 w-8 p-0"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardHeader>

        {!isMinimized && (
          <CardContent className="p-0 flex flex-col h-[calc(100%-80px)]">
            {/* Messages */}
            <ScrollArea className="flex-1 p-4">
              <div className="space-y-4">
                {messages.map((message) => (
                  <motion.div
                    key={message.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div className={`flex gap-2 max-w-[80%] ${message.sender === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        message.sender === 'user' 
                          ? 'bg-primary text-primary-foreground' 
                          : 'bg-gradient-primary text-primary-foreground'
                      }`}>
                        {message.sender === 'user' ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                      </div>
                      <div className={`rounded-lg p-3 ${
                        message.sender === 'user'
                          ? 'bg-primary text-primary-foreground'
                          : 'bg-muted'
                      }`}>
                        <p className="text-sm whitespace-pre-line">{message.content}</p>
                        <p className="text-xs opacity-70 mt-1">
                          {message.timestamp.toLocaleTimeString()}
                        </p>
                      </div>
                    </div>
                  </motion.div>
                ))}
                
                {isTyping && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="flex justify-start"
                  >
                    <div className="flex gap-2">
                      <div className="w-8 h-8 rounded-full bg-gradient-primary flex items-center justify-center">
                        <Bot className="h-4 w-4 text-primary-foreground" />
                      </div>
                      <div className="bg-muted rounded-lg p-3">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>

            {/* Quick Questions */}
            <div className="p-4 border-t border-border">
              <div className="mb-3">
                <p className="text-xs text-muted-foreground mb-2">C√¢u h·ªèi g·ª£i √Ω:</p>
                <div className="flex flex-wrap gap-1">
                  {predefinedQuestions.slice(0, 3).map((question, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      className="text-xs h-6 px-2"
                      onClick={() => handleQuestionClick(question)}
                    >
                      {question}
                    </Button>
                  ))}
                </div>
              </div>

              {/* Input */}
              <div className="flex gap-2">
                <div className="flex-1 relative">
                  <Input
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                    className="pr-10"
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        sendMessage(inputValue);
                      }
                    }}
                  />
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => setIsListening(!isListening)}
                    className="absolute right-1 top-1 h-6 w-6 p-0"
                  >
                    {isListening ? <MicOff className="h-3 w-3" /> : <Mic className="h-3 w-3" />}
                  </Button>
                </div>
                <Button
                  size="sm"
                  onClick={() => sendMessage(inputValue)}
                  disabled={!inputValue.trim() || isTyping}
                >
                  <Send className="h-4 w-4" />
                </Button>
                <Button
                  size="sm"
                  variant="outline"
                  onClick={clearChat}
                >
                  <RotateCcw className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardContent>
        )}
      </Card>
    </motion.div>
  );
}

// Chat Bot Toggle Button Component
export function ChatBotToggle() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <>
      <AnimatePresence>
        {isOpen && (
          <AIChatBot 
            isOpen={isOpen} 
            onToggle={() => setIsOpen(false)} 
          />
        )}
      </AnimatePresence>

      {!isOpen && (
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="fixed bottom-4 right-4 z-50"
        >
          <Button
            onClick={() => setIsOpen(true)}
            className="w-14 h-14 rounded-full shadow-lg bg-gradient-primary hover:shadow-xl transition-all duration-300"
            size="lg"
          >
            <motion.div
              animate={{ rotate: [0, 10, -10, 0] }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              <MessageCircle className="h-6 w-6" />
            </motion.div>
          </Button>
          
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 1 }}
            className="absolute -top-12 -left-32 bg-background border border-border rounded-lg px-3 py-2 shadow-lg"
          >
            <p className="text-sm text-muted-foreground whitespace-nowrap">
              üí¨ AI tr·ª£ l√Ω kinh t·∫ø
            </p>
          </motion.div>
        </motion.div>
      )}
    </>
  );
}